version: "3.9"

services:

  customer_app:
    container_name: customer-app
    image: daninavarro/customer-app:latest
    networks:
      - poc-net
    build:
      context: .
      dockerfile: Dockerfile
      args:
        JAR_FILE: customer/target/customer-app.jar
#    environment:
#      APP_POSTGRES_HOST: "postgres"
#      APP_POSTGRES_PORT: "5432"
#      APP_POSTGRES_SCHEMA: "public"
#      APP_POSTGRES_DB: "finops-server-ms-payment-processor"
#      APP_POSTGRES_USER: "user"
#      APP_POSTGRES_PASSWORD: "password"
#      APP_SERVER_PORT: "8080"
#      APP_KAFKA_BROKERS: "kafka:9092"
#      APP_KAFKA_SECURITY_PROTOCOL: "PLAINTEXT"
#      APP_KAFKA_TRUSTSTORE: ""
    ports:
      - "8085:8080"
#    depends_on:
#      - postgres
#      - kafka

  policy_app:
    container_name: policy-app
    image: daninavarro/policy-app:latest
    profiles:
      - policy_app
    networks:
      - poc-net
    build:
      context: .
      dockerfile: Dockerfile
      args:
        JAR_FILE: policy/target/policy-app.jar
    ports:
      - "8086:8080"
    environment:
      APP_SERVER_PORT: 8080
      APP_KAFKA_BROKERS: "kafka:9092"
      APP_KAFKA_SECURITY_PROTOCOL: "PLAINTEXT"
      APP_KAFKA_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      APP_MONGODB_CLUSTER: "mongodb"
      APP_MONGODB_PORT: "27017"
      APP_MONGODB_DB: "policy"
      APP_MONGODB_USER: "user"
      APP_MONGODB_PASSWORD: "password"
    depends_on:
      - kafka-broker
      - mongodb

  mongodb:
    container_name: policy-app-mongo-db
    image: mongo:latest
    restart: always
    networks:
      - poc-net
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "user"
      MONGO_INITDB_DATABASE: "policy"
      MONGO_INITDB_ROOT_PASSWORD: "password"
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js # Mongo Config Script
      - ./mongo/storage:/data/db                                        # Local DB storage

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: poc-zookeeper-service
    networks:
      - poc-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      #ALLOW_ANONYMOUS_LOGIN: yes

  kafka-broker:
    image: confluentinc/cp-server:7.3.0
    hostname: kafka
    container_name: poc-kafka-broker-1
    networks:
      - poc-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10

  schema-registry:
    container_name: poc-schema-registry
    image:  confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    networks:
      - poc-net
    depends_on:
      - zookeeper
      - kafka-broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      PORT: 8081
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10

  schema-registry-ui:
    container_name: poc-schema-registry-ui
    image: landoop/schema-registry-ui
    hostname: schema-registry-ui
    networks:
      - poc-net
    ports:
      - "8000:8000"
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8081
      PROXY: "true"
      ALLOW_GLOBAL: "true"
      ALLOW_TRANSITIVE: "true"
      ALLOW_DELETION: "true"
    depends_on:
      - schema-registry
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10

  rest-proxy:
    container_name: poc-kafka-rest-proxy
    image: confluentinc/cp-kafka-rest:6.2.0
    depends_on:
      - zookeeper
      - kafka-broker
      - schema-registry
    networks:
      - poc-net
    ports:
      - "8082:8082"
    hostname: kafka-rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081/

  kafdrop:
    container_name: poc-kafdrop
    image: obsidiandynamics/kafdrop
    profiles:
      - kafdrop
    networks:
      - poc-net
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      SCHEMAREGISTRY_CONNECT: "http://schema-registry:8081"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka-broker
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10

  kafka-ui:
    container_name: poc-kafka-ui
    image: provectuslabs/kafka-ui:latest
    networks:
      - poc-net
    ports:
      - "9999:8080"
    depends_on:
      - zookeeper
      - kafka-broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:29092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081

networks:
  poc-net:
